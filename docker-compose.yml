version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: freelancer-feedback-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: freelancer_feedback_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - freelancer-network

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: freelancer-feedback-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - freelancer-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: freelancer-feedback-backend
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/freelancer_feedback_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production-min-32-characters
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/2
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - freelancer-network

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: freelancer-feedback-celery
    restart: unless-stopped
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=2
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/freelancer_feedback_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production-min-32-characters
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/2
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - freelancer-network

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: freelancer-feedback-celery-beat
    restart: unless-stopped
    command: celery -A app.tasks.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/freelancer_feedback_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production-min-32-characters
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/2
    volumes:
      - ./backend:/app
    depends_on:
      - redis
      - celery-worker
    networks:
      - freelancer-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: freelancer-feedback-frontend
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_ENVIRONMENT=development
    ports:
      - "3000:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - freelancer-network

  # Flower - Celery Monitoring (Optional)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: freelancer-feedback-flower
    restart: unless-stopped
    command: celery -A app.tasks.celery_app flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/2
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    networks:
      - freelancer-network
    profiles:
      - monitoring

  # Prometheus - Metrics Collection (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: freelancer-feedback-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - freelancer-network
    profiles:
      - monitoring

  # Grafana - Metrics Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: freelancer-feedback-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - freelancer-network
    profiles:
      - monitoring

  # Nginx - Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: freelancer-feedback-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - freelancer-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  freelancer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
